import sys

# Problem statement from Kattis:
# 
# "You work in the IT support division of an electronics store. This year, in
# an attempt to prevent overcrowding, the management has decided to limit the 
# number of people entering the store. They divide the people at the entrance 
# into groups of size n and process them as follows: all n participants roll a 
# die, and report the outcomes a1,a2,â€¦,an. To prevent cheating, instead of selecting
# the one with the highest outcome, the rule is to select the participant with the 
# highest unique outcome. Everybody not selected has to move to the back of the queue. 
# If there is no winner, the experiment is repeated.
#
# For example, if there are three players and the outcomes are 6, 6 and 5, then the 
# third player wins, because the first and second player lose even though their 
# outcomes are higher, since they both have the same outcome. If instead the third 
# player also rolls 6, then nobody wins.
#
# They asked you to write a program for selecting the winner."


def solve(rolls):
    """
    Parameters:
     - rolls: List of integers. The outcome of each participant's die roll.

    Returns: Integer, or None.
             The index of the participant that has the highest unique outcome.
             If no such participant exists, return None.
    """

    roll_dict = {}

    for i, roll in enumerate(rolls, 1):
        if not roll in roll_dict:
            roll_dict[roll] = [i]
        else:
            roll_dict[roll] += [i]

    max_unique = None

    for roll, indexes in roll_dict.items():
        if len(indexes) == 1 and (max_unique == None or roll > max_unique[0]):
            max_unique = (roll, indexes[0])

    if max_unique == None:
        return None
        
    return max_unique[1]


### The following code (provided by my professor) handles the input and output 
### tasks for this problem.

if __name__ == "__main__":
    tokens = sys.stdin.read().split()

    n = int(tokens.pop(0))
    rolls = [int(tokens.pop(0)) for i in range(n)]

    rv = solve(rolls)
    if rv is None:
        print("none")
    else:
        print(rv)
