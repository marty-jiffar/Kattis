import sys

# Problem statement from Kattis:
#
# "You are part of a team developing software to help students learn basic 
# mathematics. You are to write one part of that software, which is to display 
# possibly improper fractions as mixed fractions. A proper fraction is one where
# the numerator is less than the denominator; a mixed fraction is a whole number 
# followed by a proper fraction. For example the improper fraction 27/12 is equivalent
# to the mixed fraction 2 3/12. You should not reduce the fraction (i.e. donâ€™t change 
# 3/12 to 1/4)."

def solve(numerator, denominator):
    """
    Parameters:
     - numerator, denominator: Integers. As defined in the problem statement.

    Returns: Tuple of three integers. This tuple will be the mixed fraction:
             the first element is the whole number, and the next two numbers
             are the numerator and denominator of the mixed fraction.
    """

    whole_num = numerator // denominator

    fraction_numerator = numerator % denominator

    return whole_num, fraction_numerator, denominator

### The following code (provided by my professor) handles the 
### input and output tasks for this problem.

if __name__ == "__main__":
    tokens = sys.stdin.read().strip().split()
    tokens.reverse()

    while True:
        numerator = int(tokens.pop())
        denominator = int(tokens.pop())

        if numerator == 0 and denominator == 0:
            break

        x = solve(numerator, denominator)

        assert isinstance(x, tuple), "solve() must return a tuple"
        assert len(x) == 3, "solve() must return a tuple of three integers"
        assert all([isinstance(y, int) for y in x]), "solve() returned a tuple containing a non-integer" 

        a, b, c = x

        print("{} {} / {}".format(a,b,c))
